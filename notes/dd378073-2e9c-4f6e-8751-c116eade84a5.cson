createdAt: "2019-02-21T21:37:16.609Z"
updatedAt: "2019-04-15T23:27:10.568Z"
type: "MARKDOWN_NOTE"
folder: "de93a30cfc4c5db1cd64"
title: "Type"
tags: []
content: '''
  # Type
  
  ### dynamically typed
  
  A variable in JavaScript can contain any data. A variable can at one moment be a string and at another be a number:
  
  ```js
  // no error
  let message = "hello";
  message = 123456;
  ``````
  Programming languages that allow such things are called “dynamically typed”, meaning that there are data types, but variables are not bound to any of them.
  
  There are seven basic data types in JavaScript. Here, we’ll cover them in general and in the next chapters we’ll talk about each of them in detail.
  
  ### Object
  
  **Object Data Properties Have Attributes**
  Each data property (object property that store data) has not only the name-value pair, but also 3 attributes (the three attributes are set to true by default):
  — **Configurable Attribute**: Specifies whether the property can be deleted or changed.
  — **Enumerable**: Specifies whether the property can be returned in a for/in loop.
  — **Writable**: Specifies whether the property can be changed.
  
  ### Create Objects
  
  1. Object literals
  
  ```js
  // This is an empty object initialized using the object literal notation
  var myBooks = {};
  
  // This is an object with 4 items, again using object literal
  var mango = {
  color: "yellow",
  shape: "round",
  sweetness: 8,
  
  howSweetAmI: function () {
  console.log("Hmm Hmm Good");
  }
  }
  ```
  
  2. Object Constructor
  
  ```js
  var mango =  new Object ();
  mango.color = "yellow";
  mango.shape= "round";
  mango.sweetness = 8;
  
  mango.howSweetAmI = function () {
  console.log("Hmm Hmm Good");
  }
  ```
  
  
  
  
  ### Number
  
  + Infinity represents the mathematical Infinity ∞. It is a special value that’s greater than any number.
  
  + NaN represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance:
  
  ### String
  
  + no char
  
  ### boolean
  
  ### null
  
  In JavaScript, null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.
  
  It’s just a special value which represents “nothing”, “empty” or “value unknown”.
  
  ### undefined
  
  The meaning of undefined is “value is not assigned”.
  
  ### objects
  
  + All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities. 
  
  ### difference between function and object
  
  Function 可以被执行
  Function 可以当做 Object 的构造函数，比如当我们使用 new操作符后面跟着一个 Function时，这个 Function会被当成构造函数返回一个对象。 代码如下：
  
  构造函数function 有 prototype 属性，而 实例 object 没有 prototype 属性. 代码如下：
'''
isStarred: false
isTrashed: false
linesHighlighted: []
