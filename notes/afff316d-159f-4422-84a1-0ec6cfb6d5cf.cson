createdAt: "2019-03-14T17:40:31.261Z"
updatedAt: "2019-03-14T17:41:16.123Z"
type: "MARKDOWN_NOTE"
folder: "d06fa048f0d6ae39bb74"
title: "Template pattern"
tags: []
content: '''
  # Template pattern 
  
  #### In Template pattern, an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under behavior pattern category.
  
  ```java
  public abstract class Game {
     abstract void initialize();
     abstract void startPlay();
     abstract void endPlay();
  
     //template method
     public final void play(){
  
        //initialize the game
        initialize();
  
        //start game
        startPlay();
  
        //end game
        endPlay();
     }
  }
  ```
  
  ```java
  public class Cricket extends Game {
  
     @Override
     void endPlay() {
        System.out.println("Cricket Game Finished!");
     }
  
     @Override
     void initialize() {
        System.out.println("Cricket Game Initialized! Start playing.");
     }
  
     @Override
     void startPlay() {
        System.out.println("Cricket Game Started. Enjoy the game!");
     }
  }```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
